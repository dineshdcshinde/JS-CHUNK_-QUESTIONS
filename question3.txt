Here are 100 new JavaScript questions, slightly harder than the previous ones, focusing on problem-solving, intermediate concepts, and advanced use of JavaScript features.

1. Intermediate Console and Variables (10 Questions)

	1.	Create a program that calculates and logs the result of (5 + 3) * 2 - 8 / 4.
	console.log((5+3)*2 - 8 / 4)

	2.	Log the value of a variable before and after incrementing it using ++.
	answer- 
		let a = 12;
		++a; 
		console.log("Pre increment)
		a++;
		console.log("Post increment")

	3.	Write a program that swaps the values of two variables without using a third variable.
	answer- 
	let a = 5;//5
	let b=6; //6
	a = a+b; //11
	b = a-b // 11 -6 = 5 ðŸ˜Ž
	a = a-b;// 11- 5 = 6 ðŸ˜Ž
	console.log(a,b)

	4.	Create a variable with a template literal that includes your name and age.
	answer- 
	let name = "Dinesh"
	let age = 22; 
	console.log(`My name is ${name} and my age is ${age}`)

	5.	Use console.table() to display the following object: { name: "John", age: 30, city: "New York" }.
	answer - 
		let obj = {
		name:"John",
		last:"Doe",
		pass: 1234
		}

		console.table(obj)
		console.log(obj)
	

	6.	Create a program that uses console.group() to group related logs.
		answer- 
		let info = {
		name: "aleena",
		password: "abc1893785",
		city: "Bhopal",
		address: {
			street: "At postal office road",
			pincode: 445093,
			zipCode: 85855,
		},
		};

		console.group(`Name: ${info.name}`)
		console.log(`password: ${info.password}`)
		console.log(`City: ${info.city}`)

			console.group(`Address`)
			console.log(`street: ${info.address.street}`)
			console.log(`pincode: ${info.address.pincode}`)
			console.log(`zipCode: ${info.address.zipCode}`)
			console.groupEnd()
		console.groupEnd()
	
	7.	Use console.time() and console.timeEnd() to measure the execution time of a simple loop.
	answer - 
		console.time();
		for (let i = 0; i < 10; i++) {
		console.log(i)
		}
		console.timeEnd();

	8.	Log a variableâ€™s value dynamically by including it in a string: "The value is: <value>".
	answer - 
	let abc = 14; 
	console.log(`The value is : ${abc}`);

	9.	Use console.trace() to debug a function call stack.
	answer - 
		function greet() {
		sayHello();
	}
	
	function sayHello() {
		console.trace("Trace from sayHello");
	}
	
	greet();
  
	10.	Create and log an object dynamically using computed property names.
	answer - 
		let name = "John Smith";
		let age = 22;
		let city = "Bhopal";

		let info = {
		name,
		age,
		city,
		};

		console.log(`The name is ${name} and the age is ${age}`);

2. Advanced Loops (10 Questions)
	11.	Write a nested loop to generate a multiplication table (1 to 10).
	answer - 
		for (let i = 1; i < 11; i++) {
			let row = " ";
			for (let j = 1; j <= 10; j++) {
				row += `${j * i}`.padStart(4, " ");
			}
			console.log(row);
			}

	12.	Use a for...in loop to iterate through the properties of an object.
	answer- 
		let obj = {
		name: "John Doe",
		age: 30,
		city: "New York",
		};

		for (const key in obj) {
		console.log(key, ":", obj[key]);
		}

	13.	Write a program to calculate the sum of all even numbers between 1 and 100 using a for loop.
	answer - 
		let sum = 0;
		for (let i = 1; i <= 100; i++) {
		if (i % 2 == 0) {
			sum = sum + i;
		}
		}
		console.log(`Sum of all the even numbers from 1-100 is ${sum}`);

	14.	Use a for...of loop to iterate over a string and count the vowels.
	answer- 
		let vowels = ["a","e","i","o","u"]
		let str = "aeiou"
		let count = 0; 

		for (const char of str) {
		if(vowels.includes(char)){
			count++;
		}
		}
		console.log(count)

	15.	Create a loop that breaks out when a specific condition is met (e.g., number divisible by 7).
	answer- 
		let num = 1; 
		while(true){
		console.log(num);
		if(num%7===0){
			break;
		}
		num++
		}

	16.	Write a loop that skips numbers divisible by 3 but logs all others up to 20.
	answer- 
		for(let i=1; i<=20; i++){
		if(i%3==0){
			continue;
		}
		console.log(i);
		}

	17.	Use a do...while loop to prompt the user until they enter a positive number.
	answer- 
		let num;
		do {
		num = Number(prompt("Enter a positive number to exit..."));
		} while (num > 0 || isNaN(num));

	18.	Write a nested loop to generate a pyramid pattern:

   *
  ***
 *****
*******

answer- 
	for(let i =1; i<=4; i++){
	let str = ""

	for(let j=1; j<= 2*i-1; j++){
		str += "*"
	}
	console.log(str)
	}

	19.	Use a loop to reverse a string "JavaScript".
	answer- 
		let str = "JavaScript"
		for(let i=str.length-1; i>=0; i--){
		console.log(str[i]);
		}

	20.	Write a program to calculate the product of all numbers in an array using a loop.
	answer- 
		let arr = [1,2,3,4,5]
		let product = 1; 
		for(let i=0; i<arr.length; i++){
		product *= arr[i];
		}
		console.log(product);

3. Arrays and Objects (10 Questions)
	21.	Write a program to merge two arrays and remove duplicate values.
	answer- 
	1.Approach
	// const array1 = ["a", "b", "c"];
	// const array2 = ["c", "c", "d", "e"];
	// const array3 = [...new Set([...array1, ...array2])];
	// console.log(array3);

	2. Approach

	const array1 = ["a", "b", "c", "d", "c"];
	const array2 = ["c", "c", "d", "e"];
	const mergedArr = array1.concat(array2);
	let uniqueArr = [];
	for (let i = 0; i < mergedArr.length; i++) {
	if (uniqueArr.indexOf(mergedArr[i]) == -1) {
		uniqueArr.push(mergedArr[i]);
	}
	}
	console.log(uniqueArr);

	22.	Create a program to find the second largest number in an array.
	answer- 
	let arr = [1, 2, 3, 3, 54, 95, 6];
	let max = 0; 
	let secondMax = 0; 
	for(let i = 0; i < arr.length; i++) {
	if(arr[i]>max){
		secondMax = max
		max = arr[i]
	}else if(arr[i] > secondMax){
		secondMax = arr[i]
	}
	}
	console.log(secondMax)
	console.log(max)

	23.	Write a function that removes all falsy values from an array.
	answer- 
	let arr = [1, 2, 0, "", undefined, null, false, NaN];

	function removeFalsyValues(arr) {
	return arr.filter(Boolean);
	}
	console.log(removeFalsyValues(arr));

	24.	Use .reduce() to find the total sum of numbers in an array.
	answer- 
	let arr = [1, 2, 3, 4, 5, 6, 6, 76, 8];
	let sum = arr.reduce((initalValue, currVal) => initalValue + currVal, 0);
	console.log(sum);

	25.	Write a program that rotates an array to the left by n positions.
	answer- 
	let arr = [1, 2, 3, 4, 5, 5, 56, "abc", "pqr", 99, 88, 99, 77];
	function rotateLeft(arr, rotatingNumber) {
	let rotatedArr = [
		...arr.slice(rotatingNumber),
		...arr.slice(0, rotatingNumber),
	];
	console.log(rotatedArr);
	}
	rotateLeft(arr, 3);

	26.	Use .find() to locate the first even number in an array.
	answer- 
	let arr = [1,2,3,4,5,65,6,7,8]
	let firstEvenNumber = arr.find((num)=>num%2==0)
	console.log(firstEvenNumber)

	27.	Create a function that flattens a nested array (e.g., [1, [2, [3]]] â†’ [1, 2, 3]).
	answer - 
	let arr = [1, 2, 3, 4, [5, [0, 7, 8, 99, 9, 99]], 6, 8];

	let flattenedArray = arr.flat(Infinity);
	// let flattenedArray = arr.flat(2)
	console.log(flattenedArray);
	let arr = [1, 2, 3, 4, [5, [0, 7, 8, 99, 9, 99]], 6, 8];

	let flattenedArray = arr.flat(Infinity);
	// let flattenedArray = arr.flat(2)
	console.log(flattenedArray);

	28.	Write a program that counts how many times each element appears in an array.
	answer- 
	let arr = [1,2,3,4,5,5,5,55,55,5,5,55,5,55,5,5,5,5,55]
	let count ={}
	arr.forEach(element =>{
		count[element] = (count[element] || 0 ) +1;
	});
	console.log(count);

	29.	Use .some() and .every() to check conditions on an array.
	answer- 
	let arr = [1, 2, 3, 4, 5];

		// .some() - if at least one  element of the array is divsible by 2 then it will return true otherwise false

		let isEven = arr.some(ele => ele % 2==0)
		console.log(result);

		// .every() - if all elements of the array are divisible by 2 then it will return true otherwise false

		let isLessThanZero = arr.every((ele) => ele < 0);
		console.log(result);


	30.	Sort an array of objects by a specific property.
	answer- 
	let data = [
	{name:"John", age: 25},
	{name:"Doe", age:22},
	{name:"Smith", age: 30}
	]
	data.sort((a,b)=> a.age - b.age)
	console.log(data)

	2. Approach 
		let data = [
		{ name: "John", age: 25 },
		{ name: "Jane", age: 30 },
		{ name: "Alice", age: 28 },
		];

		data.sort((a, b) => a.name.localeCompare(b.name));

		console.log(data);



4. Functions and Closures (10 Questions)
	31.	Write a function that returns another function to calculate the power of a number.
	answer- 
		function getPower(base){
		return function expo(expo){
			return Math.pow(base, expo)
		}
		}
		let square = getPower(2)
		console.log(square(3))

	32.	Create a recursive function to calculate the Fibonacci sequence up to n terms.
	answer- 
		function fibonacci (n){
		if(n<=1) return n;
		return fibonacci(n-1)+ fibonacci(n-2)
		}

		for(let i=0; i<7; i++){
		console.log(fibonacci(i))
	}

	33.	Write a function that uses closures to create a counter.
	answer- 
		function createCounter (){
		let count = 0; 
		return function (){
		count++;
		return count;
		}
		}
		let counter = createCounter();
		console.log(counter());
		console.log(counter());

	34.	Create a function that memoizes the result of a computation.
	answer- 


	35.	Write a function to debounce a button click event.
	
	36.	Implement a function that throttles an API call.

	37.	Create a higher-order function that applies a callback to each element of an array.

	38.	Write a function that calculates the GCD (Greatest Common Divisor) of two numbers.

	39.	Create a function that accepts an array of functions and executes them sequentially.

	40.	Write a function to curry a simple mathematical operation.

5. Strings and Regular Expressions (10 Questions)
	41.	Write a program to reverse the words in a sentence but not the sentence itself.
	answer - 
	let sentence = "Hello, How is your Coding going on? ";
	function reverseSentence(sentence) {
	let words = sentence.split(" "); //split on basis of space
	let char = words.map((word) => word.split("").reverse().join("")); //split words and reverse
	
	let reversedSentence = char.join(" "); //join the reversed char as it is stored in the array and due to use of the join it will be converted into a string

	return reversedSentence;
	}
	console.log(reverseSentence(sentence));

	42.	Use a regex to validate if a string is a valid email address.
	answer - 
	let email = "gmail.com"
	// let emailREgex = /^[A-Z a-z\d]+(?:[.%-+][A-Za-z0-9])         $/

	let emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
	console.log(emailRegex.test(email))
	
	43.	Create a function to check if a string contains only digits.
	answer- 
	// let str = "123" // true
		let str = "123Sagar"
		let regex = /^\d+$/
		console.log(regex.test(str))

	44.	Write a function to extract all numbers from a string and return them as an array.
	answer- 
	let regex = /\d+/g
	let expression = "I have 2 super cars and also have 4 apartments"
	function getNumbers(expr){
		let numbers = expression.match(regex)
		return numbers? numbers.map(Number):[]
	}
	console.log(getNumbers(expression))

	45.	Use .match() to find all occurrences of a word in a string.
	answer- 
	let text = "Love You JavaScript";

	function findOccurance(text, occurValue) {
	let count = 0;
	let regex = new RegExp(occurValue, "gi");
	let match = text.match(regex);

	console.log(`"${occurValue}" is occured for ${match.length}`);
	}
	findOccurance(text, "o");

	46.	Create a program to capitalize the first letter of each word in a string.
	answer- 
	let str = "hello world!";
	let finalResult = "";
	function CapitalizeFirstLetter(str) {
	let words = str.split(" ");
	for (const word of words) {
		let firstLetter = word.charAt(0).toUpperCase();
		let restWords = word.slice(1);
		finalResult += firstLetter + restWords + " ";
	}
	return finalResult;
	}
	console.log(CapitalizeFirstLetter(str));

	47.	Write a function that removes duplicate characters from a string.
	answer- 
	let str = "abcccdd"
	let result = ""
	function removeDuplicates(str){
		for(let i=0; i<str.length; i++){
			if(result.indexOf(str[i])===-1){
				result += str[i]
			}
		}
		return result
	}
	console.log(removeDuplicates(str))

	48.	Use a regex to replace multiple spaces with a single space.
	answer- 
	let str = "ab      cd                                d e f g   h i j   k l n o";
	let regex = /\s+/g;
	let cleanedStr = str.replace(regex, " ");
	console.log(cleanedStr);

	49.	Write a function to check if a string is an anagram of another string.
	answer- 
	let str1  = "silent"
	let str2  = "listen"
	function checkAnagrams(str1, str2) {
		let sort1 = str1.split("").sort().join("");
		let sort2 = str2.split("").sort().join("");
		if(sort1 === sort2){
			console.log("Both are anagrams")
		}else{
			console.log("Both are not anagrams")
		}
	}
	checkAnagrams(str1, str2)

	50.	Create a function to count the frequency of each word in a string.
	answer- 
	let regex = /\b\w+\b/g;
	let str = "Hello there! How are you? What are you doing today?";
	function countWordFrequency(str) {
		str = str.toLowerCase()
	let words = str.match(regex);
	let wordFrequency = {};
	for (const word of words) {
		if (wordFrequency[word]) {
		wordFrequency[word]++;
		} else {
		wordFrequency[word] = 1;
		}
	}
	return wordFrequency;
	}
	console.log(countWordFrequency(str));

6. Intermediate DOM Manipulation (10 Questions)
	51.	Write a script to dynamically create 10 buttons on a webpage.
	answer- 
	for(let i=1; i<=10; i++){
    let button = document.createElement('button');
    button.textContent = "Click me"
    button.classList.add("btn");
    document.body.appendChild(button);
	}

	52.	Add an event listener to a button that logs its id when clicked.
	answer- 
	for (let i = 1; i <= 10; i++) {
	let button = document.createElement("button");
	button.textContent = "Click me";
	button.classList.add("btn");
	button.id = i;
	document.body.appendChild(button);
	button.addEventListener("click", () => {
		console.log(`Button ${button.id} clicked`);
	});
	}

	53.	Write a program to change the background color of a <div> on hover.
	answer- 
	let container = document.querySelector(".container"); 
	container.addEventListener("mouseover", () => {
		container.style.backgroundColor = "yellow";
	});


	54.	Dynamically add a CSS class to an element when a button is clicked.
	answer- 
	let button = document.createElement("button");
	button.textContent = "Click me";
	document.body.appendChild(button);

	button.addEventListener("click", () => {
	button.classList.add("btn");
	});

	55.	Create a function to toggle the visibility of an element.
	answer- 
	function toggleVisibility(elementId) {
	let element = document.getElementById(elementId);

	if (element.style.display === "none") {
		element.style.display = "block";
	} else {
		element.style.display = "none";
	}
	}

	56.	Write a program to count the number of <p> tags on a page.
	answer- 
	let paragraphs = document.querySelectorAll("p")
	function countParagraph (paragraphs){
		return console.log(`${paragraphs.length} paragraphs are there!`)
	}
	countParagraph(paragraphs)

	57.	Implement a function to disable all input fields on a form.
	58.	Write a program to clone an element and append it to the DOM.
	59.	Add a click event to a list of items and display the clicked itemâ€™s text.
	60.	Create a program to validate a form using JavaScript.

7. Intermediate Algorithms (10 Questions)
	61.	Write a function to merge two sorted arrays into one sorted array.

	62.	Implement a binary search algorithm.
	63.	Write a function to check if two strings are one edit away.
	64.	Create a function that finds the longest common prefix in an array of strings.
	65.	Write a program to check if a string can be rearranged into a palindrome.
	66.	Create a function to find the intersection of two arrays.
	67.	Implement the Sieve of Eratosthenes to find prime numbers up to n.
	68.	Write a program to generate all subsets of a given array.
	69.	Create a function to calculate the power of a number iteratively.
	70.	Implement a function to sort an array using the quicksort algorithm.

8. Advanced Error Handling (10 Questions)
	71.	Write a program to handle a division by zero error.
	answer- 
	let num = 55;
	function giveDivision(num, divisor) {
	if (num / divisor === Infinity) {
		return "Cannot divide by zero";
	} else {
		return num / divisor;
	}
	}

	try {
	console.log(giveDivision(num, 2));
	console.log(giveDivision(num, 0));
	console.log(giveDivision(5, 2));
	} catch (error) {
	console.log(error);
	}

	72.	Use try...catch to log an error message for invalid JSON parsing.
	answer- 
		let jsonString = {
	"name": "John Doe",
	"age": 30,
	"city": "New York"
		}   

		try {
			let jsonData = JSON.parse(jsontring);
			console.log(jsonData);
			
		} catch (error) {
			console.error(`Error occured : ${error.message}`);
		}

	73.	Write a function to validate user input and throw a custom error if invalid.
	answer-





	74.	Create a program to handle a failed promise using .catch().
	answer- 
	const getData = async () => {
	const res = await fetch("http://fakestoreapi.com/products/5");

	if (!res.ok) throw new Error("Something went wrong");

	let data = res.json();
	return data;
	};

	getData()
	.then((data) => console.log(data))
	.catch((err) => console.log(err.message));


	75.	Use finally to log a cleanup message after a promise resolves or rejects.
	answer- 
	const getData = async () => {
	const response = await fetch("https://jsonplaceholder.typicode.com/posts/5");
	const data = await response.json();
	return data;
	};

	getData()
	.then((data) => console.log(data))
	.catch((err) => console.log(err))
	.finally(() => console.log("Finally block executed!"));

	76.	Implement a function to retry a failed API call up to 3 times.
	77.	Write a function that uses try...catch inside an async function.
	78.	Create a program to handle and log syntax errors dynamically.
	79.	Write a function to ensure a variable is defined before using it.
	80.	Use error handling to check if a file exists before reading it.

9. Advanced Array and Object Manipulation (10 Questions)
	81.	Write a function that groups an array of objects by a specific property.
	82.	Use .map() to transform an array of objects into a new format.
	83.	Write a program to deep clone an object without using external libraries.
	84.	Create a function that merges multiple arrays into a single unique array.
	85.	Write a function to count the occurrences of properties in an array of objects.
	86.	Implement a function to sort an array of objects by multiple properties.
	87.	Write a function to create a nested object from a flat array of key-value pairs.
	88.	Use .reduce() to transform an array into an object with grouped values.
	89.	Create a function to find the difference between two arrays of objects.
	90.	Write a function to filter and transform an array of objects in a single step.

10. Real-World Use Cases (10 Questions)
	91.	Create a simple program that fetches and displays user data from a mock API.
	92.	Write a program to simulate a shopping cart with add, remove, and total cost features.
	93.	Implement a simple pagination system for an array of data.
	94.	Write a program to dynamically update a chart using JavaScript.
	95.	Create a program to search for and highlight specific text on a webpage.
	96.	Write a program to simulate a basic stopwatch with start, stop, and reset functionality.
	97.	Implement a function to validate password strength based on rules.
	98.	Create a simple image slider with next/previous buttons.
	99.	Write a program to sort and display data fetched from an API.
	100.	Create a program that automatically saves form data to localStorage.

